{"version":3,"file":"Immutable.js","sources":["../../../../../node_modules/pretty-format/build/plugins/Immutable.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.test = exports.serialize = exports.default = void 0;\n\nvar _collections = require('../collections');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// SENTINEL constants are from https://github.com/facebook/immutable-js\nconst IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\nconst IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\nconst IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\nconst IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\nconst IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\nconst IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@'; // immutable v4\n\nconst IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\nconst IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\nconst IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\nconst getImmutableName = name => 'Immutable.' + name;\n\nconst printAsLeaf = name => '[' + name + ']';\n\nconst SPACE = ' ';\nconst LAZY = 'â€¦'; // Seq is lazy if it calls a method like filter\n\nconst printImmutableEntries = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer,\n  type\n) =>\n  ++depth > config.maxDepth\n    ? printAsLeaf(getImmutableName(type))\n    : getImmutableName(type) +\n      SPACE +\n      '{' +\n      (0, _collections.printIteratorEntries)(\n        val.entries(),\n        config,\n        indentation,\n        depth,\n        refs,\n        printer\n      ) +\n      '}'; // Record has an entries method because it is a collection in immutable v3.\n// Return an iterator for Immutable Record from version v3 or v4.\n\nfunction getRecordEntries(val) {\n  let i = 0;\n  return {\n    next() {\n      if (i < val._keys.length) {\n        const key = val._keys[i++];\n        return {\n          done: false,\n          value: [key, val.get(key)]\n        };\n      }\n\n      return {\n        done: true,\n        value: undefined\n      };\n    }\n  };\n}\n\nconst printImmutableRecord = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer\n) => {\n  // _name property is defined only for an Immutable Record instance\n  // which was constructed with a second optional descriptive name arg\n  const name = getImmutableName(val._name || 'Record');\n  return ++depth > config.maxDepth\n    ? printAsLeaf(name)\n    : name +\n        SPACE +\n        '{' +\n        (0, _collections.printIteratorEntries)(\n          getRecordEntries(val),\n          config,\n          indentation,\n          depth,\n          refs,\n          printer\n        ) +\n        '}';\n};\n\nconst printImmutableSeq = (val, config, indentation, depth, refs, printer) => {\n  const name = getImmutableName('Seq');\n\n  if (++depth > config.maxDepth) {\n    return printAsLeaf(name);\n  }\n\n  if (val[IS_KEYED_SENTINEL]) {\n    return (\n      name +\n      SPACE +\n      '{' + // from Immutable collection of entries or from ECMAScript object\n      (val._iter || val._object\n        ? (0, _collections.printIteratorEntries)(\n            val.entries(),\n            config,\n            indentation,\n            depth,\n            refs,\n            printer\n          )\n        : LAZY) +\n      '}'\n    );\n  }\n\n  return (\n    name +\n    SPACE +\n    '[' +\n    (val._iter || // from Immutable collection of values\n    val._array || // from ECMAScript array\n    val._collection || // from ECMAScript collection in immutable v4\n    val._iterable // from ECMAScript collection in immutable v3\n      ? (0, _collections.printIteratorValues)(\n          val.values(),\n          config,\n          indentation,\n          depth,\n          refs,\n          printer\n        )\n      : LAZY) +\n    ']'\n  );\n};\n\nconst printImmutableValues = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer,\n  type\n) =>\n  ++depth > config.maxDepth\n    ? printAsLeaf(getImmutableName(type))\n    : getImmutableName(type) +\n      SPACE +\n      '[' +\n      (0, _collections.printIteratorValues)(\n        val.values(),\n        config,\n        indentation,\n        depth,\n        refs,\n        printer\n      ) +\n      ']';\n\nconst serialize = (val, config, indentation, depth, refs, printer) => {\n  if (val[IS_MAP_SENTINEL]) {\n    return printImmutableEntries(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map'\n    );\n  }\n\n  if (val[IS_LIST_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      'List'\n    );\n  }\n\n  if (val[IS_SET_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set'\n    );\n  }\n\n  if (val[IS_STACK_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      'Stack'\n    );\n  }\n\n  if (val[IS_SEQ_SENTINEL]) {\n    return printImmutableSeq(val, config, indentation, depth, refs, printer);\n  } // For compatibility with immutable v3 and v4, let record be the default.\n\n  return printImmutableRecord(val, config, indentation, depth, refs, printer);\n}; // Explicitly comparing sentinel properties to true avoids false positive\n// when mock identity-obj-proxy returns the key as the value for any key.\n\nexports.serialize = serialize;\n\nconst test = val =>\n  val &&\n  (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);\n\nexports.test = test;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;\n"],"names":["Object","defineProperty","Immutable","value","test","serialize","_collections","require$$0","getImmutableName","name","printAsLeaf","printImmutableValues","val","config","indentation","depth","refs","printer","type","maxDepth","printIteratorValues","values","printIteratorEntries","entries","printImmutableEntries","_iter","_object","_array","_collection","_iterable","printImmutableSeq","_name","i","next","_keys","length","key","done","get","undefined","getRecordEntries","printImmutableRecord","_default","default"],"mappings":"wJAEAA,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAAE,KAAgCF,EAAAG,yBAAqB,EAErD,IAAIC,EAAeC,EASnB,MAWMC,EAAmBC,GAAQ,aAAeA,EAE1CC,EAAcD,GAAQ,IAAMA,EAAO,IAkDzC,MA0EME,EAAuB,CAC3BC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,MAEEH,EAAQF,EAAOM,SACbT,EAAYF,EAAiBU,IAC7BV,EAAiBU,GAAjBV,MAGA,EAAIF,EAAac,qBACfR,EAAIS,SACJR,EACAC,EACAC,EACAC,EACAC,GAEF,IAEAZ,EAAY,CAACO,EAAKC,EAAQC,EAAaC,EAAOC,EAAMC,IACpDL,EA/JkB,yBAeM,EAC5BA,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,MAEEH,EAAQF,EAAOM,SACbT,EAAYF,EAAiBU,IAC7BV,EAAiBU,GAAjBV,MAGA,EAAIF,EAAagB,sBACfV,EAAIW,UACJV,EACAC,EACAC,EACAC,EACAC,GAEF,IA2HKO,CACLZ,EACAC,EACAC,EACAC,EACAC,EACAC,EACAL,EAtKsB,6BAsKK,aAAe,OAI1CA,EA7KmB,0BA8KdD,EACLC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA,QAIAL,EAlLkB,yBAmLbD,EACLC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAL,EA9LsB,6BA8LK,aAAe,OAI1CA,EA7LoB,2BA8LfD,EACLC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA,SAIAL,EA3MkB,yBAmFE,EAACA,EAAKC,EAAQC,EAAaC,EAAOC,EAAMC,KAChE,MAAMR,EAAOD,EAAiB,OAE9B,QAAMO,EAAQF,EAAOM,SACZT,EAAYD,GAGjBG,EA/FoB,2BAiGpBH,EAAAA,MAGCG,EAAIa,OAASb,EAAIc,SACd,EAAIpB,EAAagB,sBACfV,EAAIW,UACJV,EACAC,EACAC,EACAC,EACAC,GA7FC,KAgGP,IAKFR,EAAAA,MAGCG,EAAIa,OACLb,EAAIe,QACJf,EAAIgB,aACJhB,EAAIiB,WACA,EAAIvB,EAAac,qBACfR,EAAIS,SACJR,EACAC,EACAC,EACAC,EACAC,GAlHG,KAqHT,KA8EOa,CAAkBlB,EAAKC,EAAQC,EAAaC,EAAOC,EAAMC,GApJvC,EAC3BL,EACAC,EACAC,EACAC,EACAC,EACAC,KAIA,MAAMR,EAAOD,EAAiBI,EAAImB,OAAS,UAC3C,QAAShB,EAAQF,EAAOM,SACpBT,EAAYD,GACZA,EAAAA,MAGE,EAAIH,EAAagB,sBApCzB,SAA0BV,GACxB,IAAIoB,EAAI,EACR,MAAO,CACLC,OACE,GAAID,EAAIpB,EAAIsB,MAAMC,OAAQ,CACxB,MAAMC,EAAMxB,EAAIsB,MAAMF,KACtB,MAAO,CACLK,MAAM,EACNlC,MAAO,CAACiC,EAAKxB,EAAI0B,IAAIF,KAIzB,MAAO,CACLC,MAAM,EACNlC,WAAOoC,KAuBLC,CAAiB5B,GACjBC,EACAC,EACAC,EACAC,EACAC,GAEF,KA+HCwB,CAAqB7B,EAAKC,EAAQC,EAAaC,EAAOC,EAAMC,GAIpDf,EAAAG,UAAGA,EAEpB,MAAMD,EAAOQ,GACXA,KAC+B,IAA9BA,EA9N0B,gCA8NwC,IAA5BA,EAzNd,6BA2NfV,EAAAE,KAAGA,EAKf,IAAIsC,EAJW,CACbrC,UAAAA,EACAD,KAAAA,GAGFF,EAAAyC,QAAkBD"}