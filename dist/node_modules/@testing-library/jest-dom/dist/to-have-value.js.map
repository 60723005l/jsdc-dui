{"version":3,"file":"to-have-value.js","sources":["../../../../../node_modules/@testing-library/jest-dom/dist/to-have-value.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveValue = toHaveValue;\n\nvar _isEqualWith = _interopRequireDefault(require(\"lodash/isEqualWith\"));\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveValue(htmlElement, expectedValue) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveValue, this);\n\n  if (htmlElement.tagName.toLowerCase() === 'input' && ['checkbox', 'radio'].includes(htmlElement.type)) {\n    throw new Error('input with type=checkbox or type=radio cannot be used with .toHaveValue(). Use .toBeChecked() for type=checkbox or .toHaveFormValues() instead');\n  }\n\n  const receivedValue = (0, _utils.getSingleElementValue)(htmlElement);\n  const expectsValue = expectedValue !== undefined;\n  let expectedTypedValue = expectedValue;\n  let receivedTypedValue = receivedValue;\n\n  if (expectedValue == receivedValue && expectedValue !== receivedValue) {\n    expectedTypedValue = `${expectedValue} (${typeof expectedValue})`;\n    receivedTypedValue = `${receivedValue} (${typeof receivedValue})`;\n  }\n\n  return {\n    pass: expectsValue ? (0, _isEqualWith.default)(receivedValue, expectedValue, _utils.compareArraysAsSet) : Boolean(receivedValue),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      const matcher = this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveValue`, 'element', expectedValue);\n      return (0, _utils.getMessage)(this, matcher, `Expected the element ${to} have value`, expectsValue ? expectedTypedValue : '(any)', 'Received', receivedTypedValue);\n    }\n  };\n}"],"names":["_interopRequireDefault","require$$0","Object","defineProperty","toHaveValue_1","value","toHaveValue","htmlElement","expectedValue","_utils","checkHtmlElement","this","tagName","toLowerCase","includes","type","Error","receivedValue","getSingleElementValue","expectsValue","undefined","expectedTypedValue","receivedTypedValue","pass","_isEqualWith","default","compareArraysAsSet","Boolean","message","to","isNot","matcher","utils","matcherHint","getMessage","require$$1","require$$2"],"mappings":"4XAEA,IAAIA,EAAyBC,EAAAA,QAE7BC,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAEUD,EAAAE,YAMnB,SAASA,EAAYC,EAAaC,GAGhC,IAFA,EAAIC,EAAOC,kBAAkBH,EAAaD,EAAaK,MAEb,UAAtCJ,EAAYK,QAAQC,eAA6B,CAAC,WAAY,SAASC,SAASP,EAAYQ,MAC9F,MAAM,IAAIC,MAAM,kJAGlB,MAAMC,GAAgB,EAAIR,EAAOS,uBAAuBX,GAClDY,OAAiCC,IAAlBZ,EACrB,IAAIa,EAAqBb,EACrBc,EAAqBL,EAErBT,GAAiBS,GAAiBT,IAAkBS,IACtDI,EAAqB,GAAGb,aAAyBA,KACjDc,EAAqB,GAAGL,aAAyBA,MAGnD,MAAO,CACLM,KAAMJ,GAAe,EAAIK,EAAaC,SAASR,EAAeT,EAAeC,EAAOiB,oBAAsBC,QAAQV,GAClHW,QAAS,KACP,MAAMC,EAAKlB,KAAKmB,MAAQ,SAAW,KAC7BC,EAAUpB,KAAKqB,MAAMC,aAAetB,KAAKmB,MAAQ,OAAS,IAAzB,eAA2C,UAAWtB,GAC7F,OAAO,EAAIC,EAAOyB,YAAYvB,KAAMoB,EAAS,wBAAwBF,eAAiBV,EAAeE,EAAqB,QAAS,WAAYC,MA1BrJ,IAAIE,EAAexB,EAAuBmC,GAEtC1B,EAAS2B"}