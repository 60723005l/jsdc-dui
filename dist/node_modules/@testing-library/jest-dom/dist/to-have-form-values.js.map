{"version":3,"file":"to-have-form-values.js","sources":["../../../../../node_modules/@testing-library/jest-dom/dist/to-have-form-values.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveFormValues = toHaveFormValues;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _isEqualWith = _interopRequireDefault(require(\"lodash/isEqualWith\"));\n\nvar _uniq = _interopRequireDefault(require(\"lodash/uniq\"));\n\nvar _css = _interopRequireDefault(require(\"css.escape\"));\n\nvar _utils = require(\"./utils\");\n\n// Returns the combined value of several elements that have the same name\n// e.g. radio buttons or groups of checkboxes\nfunction getMultiElementValue(elements) {\n  const types = (0, _uniq.default)(elements.map(element => element.type));\n\n  if (types.length !== 1) {\n    throw new Error('Multiple form elements with the same name must be of the same type');\n  }\n\n  switch (types[0]) {\n    case 'radio':\n      {\n        const theChosenOne = elements.find(radio => radio.checked);\n        return theChosenOne ? theChosenOne.value : undefined;\n      }\n\n    case 'checkbox':\n      return elements.filter(checkbox => checkbox.checked).map(checkbox => checkbox.value);\n\n    default:\n      // NOTE: Not even sure this is a valid use case, but just in case...\n      return elements.map(element => element.value);\n  }\n}\n\nfunction getFormValue(container, name) {\n  const elements = [...container.querySelectorAll(`[name=\"${(0, _css.default)(name)}\"]`)];\n  /* istanbul ignore if */\n\n  if (elements.length === 0) {\n    return undefined; // shouldn't happen, but just in case\n  }\n\n  switch (elements.length) {\n    case 1:\n      return (0, _utils.getSingleElementValue)(elements[0]);\n\n    default:\n      return getMultiElementValue(elements);\n  }\n} // Strips the `[]` suffix off a form value name\n\n\nfunction getPureName(name) {\n  return /\\[\\]$/.test(name) ? name.slice(0, -2) : name;\n}\n\nfunction getAllFormValues(container) {\n  const names = Array.from(container.elements).map(element => element.name);\n  return names.reduce((obj, name) => (0, _extends2.default)({}, obj, {\n    [getPureName(name)]: getFormValue(container, name)\n  }), {});\n}\n\nfunction toHaveFormValues(formElement, expectedValues) {\n  (0, _utils.checkHtmlElement)(formElement, toHaveFormValues, this);\n\n  if (!formElement.elements) {\n    // TODO: Change condition to use instanceof against the appropriate element classes instead\n    throw new Error('toHaveFormValues must be called on a form or a fieldset');\n  }\n\n  const formValues = getAllFormValues(formElement);\n  return {\n    pass: Object.entries(expectedValues).every(([name, expectedValue]) => (0, _isEqualWith.default)(formValues[name], expectedValue, _utils.compareArraysAsSet)),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      const matcher = `${this.isNot ? '.not' : ''}.toHaveFormValues`;\n      const commonKeyValues = Object.keys(formValues).filter(key => expectedValues.hasOwnProperty(key)).reduce((obj, key) => (0, _extends2.default)({}, obj, {\n        [key]: formValues[key]\n      }), {});\n      return [this.utils.matcherHint(matcher, 'element', ''), `Expected the element ${to} have form values`, this.utils.diff(expectedValues, commonKeyValues)].join('\\n\\n');\n    }\n  };\n}"],"names":["_interopRequireDefault","require$$0","Object","defineProperty","toHaveFormValues_1","value","toHaveFormValues","formElement","expectedValues","_utils","checkHtmlElement","this","elements","Error","formValues","container","Array","from","map","element","name","reduce","obj","_extends2","default","getPureName","getFormValue","pass","entries","every","expectedValue","_isEqualWith","compareArraysAsSet","message","to","isNot","matcher","commonKeyValues","keys","filter","key","hasOwnProperty","utils","matcherHint","diff","join","require$$1","require$$2","_uniq","require$$3","_css","require$$4","require$$5","querySelectorAll","length","getSingleElementValue","types","type","theChosenOne","find","radio","checked","undefined","checkbox","getMultiElementValue","test","slice"],"mappings":"smBAEA,IAAIA,EAAyBC,EAAAA,QAE7BC,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAEeD,EAAAE,iBAkExB,SAASA,EAAiBC,EAAaC,GAGrC,IAFA,EAAIC,EAAOC,kBAAkBH,EAAaD,EAAkBK,OAEvDJ,EAAYK,SAEf,MAAM,IAAIC,MAAM,2DAGlB,MAAMC,GAfkBC,EAeYR,EAdtBS,MAAMC,KAAKF,EAAUH,UAAUM,KAAIC,GAAWA,EAAQC,OACvDC,QAAO,CAACC,EAAKF,KAAS,EAAIG,EAAUC,SAAS,GAAIF,EAAK,CACjE,CAACG,EAAYL,IAAQM,EAAaX,EAAWK,MAC3C,KAJN,IAA0BL,EAgBxB,MAAO,CACLY,KAAMzB,OAAO0B,QAAQpB,GAAgBqB,OAAM,EAAET,EAAMU,MAAmB,EAAIC,EAAaP,SAASV,EAAWM,GAAOU,EAAerB,EAAOuB,sBACxIC,QAAS,KACP,MAAMC,EAAKvB,KAAKwB,MAAQ,SAAW,KAC7BC,GAAazB,KAAKwB,MAAQ,OAAS,IAAzB,oBACVE,EAAkBnC,OAAOoC,KAAKxB,GAAYyB,QAAOC,GAAOhC,EAAeiC,eAAeD,KAAMnB,QAAO,CAACC,EAAKkB,KAAQ,EAAIjB,EAAUC,SAAS,GAAIF,EAAK,CACrJkB,CAACA,GAAM1B,EAAW0B,MAChB,IACJ,MAAO,CAAC7B,KAAK+B,MAAMC,YAAYP,EAAS,UAAW,IAAK,wBAAwBF,qBAAuBvB,KAAK+B,MAAME,KAAKpC,EAAgB6B,IAAkBQ,KAAK,WAjFpK,IAAItB,EAAYvB,EAAuB8C,EAAAA,SAEnCf,EAAe/B,EAAuB+C,GAEtCC,EAAQhD,EAAuBiD,GAE/BC,EAAOlD,EAAuBmD,EAAAA,SAE9B1C,EAAS2C,EA2Bb,SAAS1B,EAAaX,EAAWK,GAC/B,MAAMR,EAAW,IAAIG,EAAUsC,iBAAiB,WAAU,EAAIH,EAAK1B,SAASJ,SAG5E,GAAwB,IAApBR,EAAS0C,OAIb,OACO,IADC1C,EAAS0C,QAEN,EAAI7C,EAAO8C,uBAAuB3C,EAAS,IAjCxD,SAA8BA,GAC5B,MAAM4C,GAAQ,EAAIR,EAAMxB,SAASZ,EAASM,KAAIC,GAAWA,EAAQsC,QAEjE,GAAqB,IAAjBD,EAAMF,OACR,MAAM,IAAIzC,MAAM,sEAGlB,OAAQ2C,EAAM,IACZ,IAAK,QACH,CACE,MAAME,EAAe9C,EAAS+C,MAAKC,GAASA,EAAMC,UAClD,OAAOH,EAAeA,EAAarD,WAAQyD,EAG/C,IAAK,WACH,OAAOlD,EAAS2B,QAAOwB,GAAYA,EAASF,UAAS3C,KAAI6C,GAAYA,EAAS1D,QAEhF,QAEE,OAAOO,EAASM,KAAIC,GAAWA,EAAQd,SAiBhC2D,CAAqBpD,GAKlC,SAASa,EAAYL,GACnB,MAAO,QAAQ6C,KAAK7C,GAAQA,EAAK8C,MAAM,GAAI,GAAK9C"}