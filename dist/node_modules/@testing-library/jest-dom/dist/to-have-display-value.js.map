{"version":3,"file":"to-have-display-value.js","sources":["../../../../../node_modules/@testing-library/jest-dom/dist/to-have-display-value.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveDisplayValue = toHaveDisplayValue;\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveDisplayValue(htmlElement, expectedValue) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveDisplayValue, this);\n  const tagName = htmlElement.tagName.toLowerCase();\n\n  if (!['select', 'input', 'textarea'].includes(tagName)) {\n    throw new Error('.toHaveDisplayValue() currently supports only input, textarea or select elements, try with another matcher instead.');\n  }\n\n  if (tagName === 'input' && ['radio', 'checkbox'].includes(htmlElement.type)) {\n    throw new Error(`.toHaveDisplayValue() currently does not support input[type=\"${htmlElement.type}\"], try with another matcher instead.`);\n  }\n\n  const values = getValues(tagName, htmlElement);\n  const expectedValues = getExpectedValues(expectedValue);\n  const numberOfMatchesWithValues = expectedValues.filter(expected => values.some(value => expected instanceof RegExp ? expected.test(value) : this.equals(value, String(expected)))).length;\n  const matchedWithAllValues = numberOfMatchesWithValues === values.length;\n  const matchedWithAllExpectedValues = numberOfMatchesWithValues === expectedValues.length;\n  return {\n    pass: matchedWithAllValues && matchedWithAllExpectedValues,\n    message: () => (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveDisplayValue`, 'element', ''), `Expected element ${this.isNot ? 'not ' : ''}to have display value`, expectedValue, 'Received', values)\n  };\n}\n\nfunction getValues(tagName, htmlElement) {\n  return tagName === 'select' ? Array.from(htmlElement).filter(option => option.selected).map(option => option.textContent) : [htmlElement.value];\n}\n\nfunction getExpectedValues(expectedValue) {\n  return expectedValue instanceof Array ? expectedValue : [expectedValue];\n}"],"names":["Object","defineProperty","toHaveDisplayValue_1","value","toHaveDisplayValue","htmlElement","expectedValue","_utils","checkHtmlElement","this","tagName","toLowerCase","includes","Error","type","values","Array","from","filter","option","selected","map","textContent","getValues","expectedValues","getExpectedValues","numberOfMatchesWithValues","expected","some","RegExp","test","equals","String","length","matchedWithAllValues","matchedWithAllExpectedValues","pass","message","getMessage","utils","matcherHint","isNot","require$$0"],"mappings":"uOAEAA,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAEiBD,EAAAE,mBAI1B,SAASA,EAAmBC,EAAaC,IACvC,EAAIC,EAAOC,kBAAkBH,EAAaD,EAAoBK,MAC9D,MAAMC,EAAUL,EAAYK,QAAQC,cAEpC,IAAK,CAAC,SAAU,QAAS,YAAYC,SAASF,GAC5C,MAAM,IAAIG,MAAM,uHAGlB,GAAgB,UAAZH,GAAuB,CAAC,QAAS,YAAYE,SAASP,EAAYS,MACpE,MAAM,IAAID,MAAM,gEAAgER,EAAYS,6CAG9F,MAAMC,EAWR,SAAmBL,EAASL,GAC1B,MAAmB,WAAZK,EAAuBM,MAAMC,KAAKZ,GAAaa,QAAOC,GAAUA,EAAOC,WAAUC,KAAIF,GAAUA,EAAOG,cAAe,CAACjB,EAAYF,OAZ1HoB,CAAUb,EAASL,GAC5BmB,EAcR,SAA2BlB,GACzB,OAAOA,aAAyBU,MAAQV,EAAgB,CAACA,GAflCmB,CAAkBnB,GACnCoB,EAA4BF,EAAeN,QAAOS,GAAYZ,EAAOa,MAAKzB,GAASwB,aAAoBE,OAASF,EAASG,KAAK3B,GAASM,KAAKsB,OAAO5B,EAAO6B,OAAOL,QAAaM,OAC9KC,EAAuBR,IAA8BX,EAAOkB,OAC5DE,EAA+BT,IAA8BF,EAAeS,OAClF,MAAO,CACLG,KAAMF,GAAwBC,EAC9BE,QAAS,KAAM,EAAI9B,EAAO+B,YAAY7B,KAAMA,KAAK8B,MAAMC,aAAe/B,KAAKgC,MAAQ,OAAS,IAAzB,sBAAkD,UAAW,IAAK,oBAAoBhC,KAAKgC,MAAQ,OAAS,0BAA2BnC,EAAe,WAAYS,KArBzO,IAAIR,EAASmC"}