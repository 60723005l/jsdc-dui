import{__exports as e}from"../../../../_virtual/to-be-checked.js";export{__exports as default}from"../../../../_virtual/to-be-checked.js";import"../../../aria-query/lib/index.js";import"./utils.js";import{__exports as t}from"../../../../_virtual/index3.js";import{__exports as r}from"../../../../_virtual/utils.js";Object.defineProperty(e,"__esModule",{value:!0}),e.toBeChecked=function e(t){(0,o.checkHtmlElement)(t,e,this);const r=()=>"input"===t.tagName.toLowerCase()&&["checkbox","radio"].includes(t.type);if(!(r()||s(t.getAttribute("role"))&&["true","false"].includes(t.getAttribute("aria-checked"))))return{pass:!1,message:()=>`only inputs with type="checkbox" or type="radio" or elements with ${(0,o.toSentence)(i.roles.keys().filter(s).map((e=>`role="${e}"`)),{lastWordConnector:" or "})} and a valid aria-checked attribute can be used with .toBeChecked(). Use .toHaveValue() instead`};const a=()=>r()?t.checked:"true"===t.getAttribute("aria-checked");return{pass:a(),message:()=>{const e=a()?"is":"is not";return[this.utils.matcherHint((this.isNot?".not":"")+".toBeChecked","element",""),"",`Received element ${e} checked:`,`  ${this.utils.printReceived(t.cloneNode(!1))}`].join("\n")}}};var i=t,o=r;function s(e){var t;return void 0!==(null==(t=i.roles.get(e))?void 0:t.props["aria-checked"])}
//# sourceMappingURL=to-be-checked.js.map
