import{__exports as e}from"../../../../_virtual/to-have-form-values.js";export{__exports as default}from"../../../../_virtual/to-have-form-values.js";import"../../../@babel/runtime/helpers/interopRequireDefault.js";import"../../../@babel/runtime/helpers/extends.js";import t from"lodash/isEqualWith";import r from"lodash/uniq";import"../../../css.escape/css.escape.js";import"./utils.js";import{_ as s}from"../../../../_virtual/extends.js";import{c as o}from"../../../../_virtual/css.escape.js";import{__exports as a}from"../../../../_virtual/utils.js";import{i}from"../../../../_virtual/interopRequireDefault.js";var l=i.exports;Object.defineProperty(e,"__esModule",{value:!0}),e.toHaveFormValues=function e(t,r){if((0,f.checkHtmlElement)(t,e,this),!t.elements)throw new Error("toHaveFormValues must be called on a form or a fieldset");const s=(o=t,Array.from(o.elements).map((e=>e.name)).reduce(((e,t)=>(0,n.default)({},e,{[h(t)]:p(o,t)})),{}));var o;return{pass:Object.entries(r).every((([e,t])=>(0,u.default)(s[e],t,f.compareArraysAsSet))),message:()=>{const e=this.isNot?"not to":"to",t=(this.isNot?".not":"")+".toHaveFormValues",o=Object.keys(s).filter((e=>r.hasOwnProperty(e))).reduce(((e,t)=>(0,n.default)({},e,{[t]:s[t]})),{});return[this.utils.matcherHint(t,"element",""),`Expected the element ${e} have form values`,this.utils.diff(r,o)].join("\n\n")}}};var n=l(s.exports),u=l(t),m=l(r),c=l(o.exports),f=a;function p(e,t){const r=[...e.querySelectorAll(`[name="${(0,c.default)(t)}"]`)];if(0!==r.length)return 1===r.length?(0,f.getSingleElementValue)(r[0]):function(e){const t=(0,m.default)(e.map((e=>e.type)));if(1!==t.length)throw new Error("Multiple form elements with the same name must be of the same type");switch(t[0]){case"radio":{const t=e.find((e=>e.checked));return t?t.value:void 0}case"checkbox":return e.filter((e=>e.checked)).map((e=>e.value));default:return e.map((e=>e.value))}}(r)}function h(e){return/\[\]$/.test(e)?e.slice(0,-2):e}
//# sourceMappingURL=to-have-form-values.js.map
