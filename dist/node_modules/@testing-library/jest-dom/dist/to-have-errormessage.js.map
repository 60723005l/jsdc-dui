{"version":3,"file":"to-have-errormessage.js","sources":["../../../../../node_modules/@testing-library/jest-dom/dist/to-have-errormessage.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveErrorMessage = toHaveErrorMessage;\n\nvar _utils = require(\"./utils\");\n\n// See aria-errormessage spec https://www.w3.org/TR/wai-aria-1.2/#aria-errormessage\nfunction toHaveErrorMessage(htmlElement, checkWith) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveErrorMessage, this);\n\n  if (!htmlElement.hasAttribute('aria-invalid') || htmlElement.getAttribute('aria-invalid') === 'false') {\n    const not = this.isNot ? '.not' : '';\n    return {\n      pass: false,\n      message: () => {\n        return (0, _utils.getMessage)(this, this.utils.matcherHint(`${not}.toHaveErrorMessage`, 'element', ''), `Expected the element to have invalid state indicated by`, 'aria-invalid=\"true\"', 'Received', htmlElement.hasAttribute('aria-invalid') ? `aria-invalid=\"${htmlElement.getAttribute('aria-invalid')}\"` : this.utils.printReceived(''));\n      }\n    };\n  }\n\n  const expectsErrorMessage = checkWith !== undefined;\n  const errormessageIDRaw = htmlElement.getAttribute('aria-errormessage') || '';\n  const errormessageIDs = errormessageIDRaw.split(/\\s+/).filter(Boolean);\n  let errormessage = '';\n\n  if (errormessageIDs.length > 0) {\n    const document = htmlElement.ownerDocument;\n    const errormessageEls = errormessageIDs.map(errormessageID => document.getElementById(errormessageID)).filter(Boolean);\n    errormessage = (0, _utils.normalize)(errormessageEls.map(el => el.textContent).join(' '));\n  }\n\n  return {\n    pass: expectsErrorMessage ? checkWith instanceof RegExp ? checkWith.test(errormessage) : this.equals(errormessage, checkWith) : Boolean(errormessage),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveErrorMessage`, 'element', ''), `Expected the element ${to} have error message`, this.utils.printExpected(checkWith), 'Received', this.utils.printReceived(errormessage));\n    }\n  };\n}"],"names":["Object","defineProperty","toHaveErrormessage","value","toHaveErrorMessage","htmlElement","checkWith","_utils","checkHtmlElement","this","hasAttribute","getAttribute","not","isNot","pass","message","getMessage","utils","matcherHint","printReceived","expectsErrorMessage","undefined","errormessageIDs","split","filter","Boolean","errormessage","length","document","ownerDocument","errormessageEls","map","errormessageID","getElementById","normalize","el","textContent","join","RegExp","test","equals","to","printExpected","require$$0"],"mappings":"qOAEAA,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAEiBD,EAAAE,mBAK1B,SAASA,EAAmBC,EAAaC,GAGvC,IAFA,EAAIC,EAAOC,kBAAkBH,EAAaD,EAAoBK,OAEzDJ,EAAYK,aAAa,iBAAgE,UAA7CL,EAAYM,aAAa,gBAA6B,CACrG,MAAMC,EAAMH,KAAKI,MAAQ,OAAS,GAClC,MAAO,CACLC,MAAM,EACNC,QAAS,KACA,EAAIR,EAAOS,YAAYP,KAAMA,KAAKQ,MAAMC,YAAY,GAAGN,uBAA0B,UAAW,IAAK,0DAA2D,sBAAuB,WAAYP,EAAYK,aAAa,gBAAkB,iBAAiBL,EAAYM,aAAa,mBAAqBF,KAAKQ,MAAME,cAAc,MAK/U,MAAMC,OAAoCC,IAAdf,EAEtBgB,GADoBjB,EAAYM,aAAa,sBAAwB,IACjCY,MAAM,OAAOC,OAAOC,SAC9D,IAAIC,EAAe,GAEnB,GAAIJ,EAAgBK,OAAS,EAAG,CAC9B,MAAMC,EAAWvB,EAAYwB,cACvBC,EAAkBR,EAAgBS,KAAIC,GAAkBJ,EAASK,eAAeD,KAAiBR,OAAOC,SAC9GC,GAAe,EAAInB,EAAO2B,WAAWJ,EAAgBC,KAAII,GAAMA,EAAGC,cAAaC,KAAK,MAGtF,MAAO,CACLvB,KAAMM,EAAsBd,aAAqBgC,OAAShC,EAAUiC,KAAKb,GAAgBjB,KAAK+B,OAAOd,EAAcpB,GAAamB,QAAQC,GACxIX,QAAS,KACP,MAAM0B,EAAKhC,KAAKI,MAAQ,SAAW,KACnC,OAAO,EAAIN,EAAOS,YAAYP,KAAMA,KAAKQ,MAAMC,aAAeT,KAAKI,MAAQ,OAAS,IAAzB,sBAAkD,UAAW,IAAK,wBAAwB4B,uBAAyBhC,KAAKQ,MAAMyB,cAAcpC,GAAY,WAAYG,KAAKQ,MAAME,cAAcO,OA/B9P,IAAInB,EAASoC"}