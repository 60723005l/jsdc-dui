import{__exports as e}from"../../../../_virtual/to-be-partially-checked.js";export{__exports as default}from"../../../../_virtual/to-be-partially-checked.js";import"./utils.js";import{__exports as t}from"../../../../_virtual/utils.js";Object.defineProperty(e,"__esModule",{value:!0}),e.toBePartiallyChecked=function e(t){(0,i.checkHtmlElement)(t,e,this);const a=()=>"input"===t.tagName.toLowerCase()&&"checkbox"===t.type;if(!a()&&"checkbox"!==t.getAttribute("role"))return{pass:!1,message:()=>'only inputs with type="checkbox" or elements with role="checkbox" and a valid aria-checked attribute can be used with .toBePartiallyChecked(). Use .toHaveValue() instead'};const r=()=>{const e="mixed"===t.getAttribute("aria-checked");return a()&&t.indeterminate||e};return{pass:r(),message:()=>{const e=r()?"is":"is not";return[this.utils.matcherHint((this.isNot?".not":"")+".toBePartiallyChecked","element",""),"",`Received element ${e} partially checked:`,`  ${this.utils.printReceived(t.cloneNode(!1))}`].join("\n")}}};var i=t;
//# sourceMappingURL=to-be-partially-checked.js.map
